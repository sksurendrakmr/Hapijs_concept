Request
===
Created internally for each incoming request.
request.auth => contains authentication information
request.query => each key is a query parameter.
request.path => the request URI's pathname component
etc.


h (Response Toolkit)
===
A collection of properties and utilities passed to every lifecycle
method.

h.authenticated(data) => use to handle valid credentials
h.redirect(uri) -> redirects the client to the specified uri.
h.response([value]) -> wraps provided value and returns a response object.
etc.


Plugin
===
A plugin is basically additional functionality added to our app.
(Its a module. Thus, we can import it)
In case of Hapi plugin, we also need to register it with server.

Static files
====
A static file is a file delivered to the user without having to 
to be modified or processed.
We will use a plugin called inert to serve a static file.

Inert a plugin that provides new handler methods for serving static
files and directories.

=========
ORM is a technique that lets us query and manipulate data from 
a database in an object oriented way.

we use Sequelize for it.

Sequelize is a promise based ORM.

Sequelize query() function :-
- used to run raw queries against the connected database table.
- it returns:
    - Results of the query
    - Metadata

Sequelize Models
==== 
- A model is an abstraction that represents a table in database.
- Models tell sequelize the name of the table in the database, which columns it has and their
  data types.


Authentication
====
The way the authentication works in hapi is to use of 
schemes and strategy.

Scheme -> different scheme to implement authentication.
E.g. Basic authentication, Digest authentication etc.

==
Basic authentication hides the content of a web page until credentials
are provided in a popup window.


Scheme 
====
- Scheme are a way of handling authentication within api.
- Some schemes in hapi are the basic scheme, digest scheme and cookie scheme.

Strategy
===
How we implement a scheme.


steps
1. Register the plugin
2. Implement Strategy

server.auth.strategy take three parameters
1. strategy name (whatever we want)
2. name of the scheme
3. options based on the scheme requirements.

For basic, in the option object, we need to define validate property.
validate property is a function that validate the user's credentials
to check whether the user allowed to login into the website.

validate
===
- Required key for options in server.auth.strategy() with basic scheme.
- Value is a function that must return isValid.
- Parameters - request, username, password, h


Basic authentication is not usually used for login and logout functionality.

Cookies/sessions are used for the concept of loggin in.

However, we can "logout" of basic auth using the Boom plugin.

Specifically, we throw a http unauthenticated error(401)



Cookies
====
- Cookies are essentially text files with data used to identify a user.
- When we visit a website for the first time, the website puts a cookie on your 
  browser with its own unique ID.
- The website then uses this ID to keep track of your session.
- A session is essentially your overall visit on the website.
- Every subsequent request tot this website will contain the cookie to identify
  the user.

When website loaded for the first time, it send the first request to server and then
server send the response back to client side with a cookie and every subsequent
request contains this cookie.



Cookie Scheme Cookie key options

name                      ------- The name of the cookie. Default name is 'sid'
password                  ------- Cookies are automatically encoded with iron. This is required and needs atleast 32 characters
isSecure                  ------- Default to true. If false the cookie can be transmitted over insecure connection.
ttl                       ------- The cookie time expiration in milliseconds. By default, the cookie expires when browser closes.
isHttpOnly                ------- Default is true. if false the cookie will not have the HttpOnly flag which prevents cookie from being accessed by anything other than the server.
isSameSite                ------- Default to strict (never allow cookie to be sent to a cross site request). Other options are Lax(allow cookie to be sent on some cross site requests) and false(omitted)
path                      ------- Indicate a URL path that must exist in the requested URL in order to send the cookie header. Default is none. 




Hapi auth operates in 2 modes.
- required(default) - requires credentials to be accessed
- try - Hapi will try to authenticate but if it fails the oute can still be accessed.


If the user has managed to sign in, then we want to set the cookie with user specific data.
This is done through the request.cookieAuth.set() method.


We can access credentials value either from cookieAuth.set or 
The validateFunc function can return an object with the keys valid(value is a boolean) and 
credentials (value is an object). The credentials object is passed back to the application in request.auth.credentials.
If set, these credentials will override the current cookie as if request.cookieAuth.set() was called.


request.auth.isAuthenticated() returns true if the user is already authenticated and false if the user is not authenticated.

As we already have a cookie set, this means we have already been authenticated so this will return true.



Time to live.
====
- Cookie can expire and the time it takes before a cookie expires is called time to live or ttl.
- A cookie with no expiration date sepecified will expire when the browser is closed (these are often called session cookies)
- In Hapi, we can set the ttl in milliseconds with the key ttl inside our cookie object when setting up our strategy.