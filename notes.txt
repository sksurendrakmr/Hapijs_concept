Request
===
Created internally for each incoming request.
request.auth => contains authentication information
request.query => each key is a query parameter.
request.path => the request URI's pathname component
etc.


h (Response Toolkit)
===
A collection of properties and utilities passed to every lifecycle
method.

h.authenticated(data) => use to handle valid credentials
h.redirect(uri) -> redirects the client to the specified uri.
h.response([value]) -> wraps provided value and returns a response object.
etc.


Plugin
===
A plugin is basically additional functionality added to our app.
(Its a module. Thus, we can import it)
In case of Hapi plugin, we also need to register it with server.

Static files
====
A static file is a file delivered to the user without having to 
to be modified or processed.
We will use a plugin called inert to serve a static file.

Inert a plugin that provides new handler methods for serving static
files and directories.

=========
ORM is a technique that lets us query and manipulate data from 
a database in an object oriented way.

we use Sequelize for it.

Sequelize is a promise based ORM.

Sequelize query() function :-
- used to run raw queries against the connected database table.
- it returns:
    - Results of the query
    - Metadata

Sequelize Models
==== 
- A model is an abstraction that represents a table in database.
- Models tell sequelize the name of the table in the database, which columns it has and their
  data types.


Authentication
====
The way the authentication works in hapi is to use of 
schemes and strategy.

Scheme -> different scheme to implement authentication.
E.g. Basic authentication, Digest authentication etc.

==
Basic authentication hides the content of a web page until credentials
are provided in a popup window.


Scheme 
====
- Scheme are a way of handling authentication within api.
- Some schemes in hapi are the basic scheme, digest scheme and cookie scheme.

Strategy
===
How we implement a scheme.


steps
1. Register the plugin
2. Implement Strategy

server.auth.strategy take three parameters
1. strategy name (whatever we want)
2. name of the scheme
3. options based on the scheme requirements.

For basic, in the option object, we need to define validate property.
validate property is a function that validate the user's credentials
to check whether the user allowed to login into the website.

validate
===
- Required key for options in server.auth.strategy() with basic scheme.
- Value is a function that must return isValid.
- Parameters - request, username, password, h


Basic authentication is not usually used for login and logout functionality.

Cookies/sessions are used for the concept of loggin in.

However, we can "logout" of basic auth using the Boom plugin.

Specifically, we throw a http unauthenticated error(401)